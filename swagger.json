{
  "openapi": "3.0.0",
  "info": {
    "title": "Event Ticketing API",
    "version": "1.0.0",
    "description": "API documentation for the Event Ticketing application."
  },
  "servers": [
    {
      "url": "http://localhost:1200/event-ticketing/api/v1",
      "description": "Local server"
    },
    {
      "url": "https://eventticketing-backend.onrender.com/event-ticketing/api/v1",
      "description": "Production server"
    }
  ],
  "paths": {
    "/user/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "summary": "User login",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "400": {
            "description": "Invalid login details"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get user details",
        "tags": ["User"],
        "security": [{ "jwtAuth": [] }],
        "responses": {
          "200": {
            "description": "User details retrieved successfully"
          }
        }
      }
    },
    "/user/update": {
      "put": {
        "summary": "Update user details",
        "tags": ["User"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "summary": "Logout user",
        "tags": ["User"],
        "security": [{ "jwtAuth": [] }],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "summary": "Delete a user",
        "tags": ["User"],
        "security": [{ "jwtAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          }
        }
      }
    },
    "/event/create": {
      "post": {
        "summary": "Create a new event",
        "tags": ["Event"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event created successfully"
          },
          "409": {
            "description": "Duplicate event"
          }
        }
      }
    },
    "/event": {
      "get": {
        "summary": "Get all event details",
        "tags": ["Event"],
        "security": [{ "jwtAuth": [] }],
        "responses": {
          "200": {
            "description": "Event details retrieved successfully"
          }
        }
      }
    },
    "/event/{id}": {
      "get": {
        "summary": "Get event details",
        "tags": ["Event"],
        "security": [{ "jwtAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event details retrieved successfully"
          }
        }
      },
      "delete": {
        "summary": "Delete an event",
        "tags": ["Event"],
        "security": [{ "jwtAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully"
          }
        }
      }
    },
    "/event/update": {
      "put": {
        "summary": "Update event details",
        "tags": ["Event"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated successfully"
          }
        }
      }
    },
    "/booking/create": {
      "post": {
        "summary": "Create a new booking",
        "tags": ["Booking"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking created successfully"
          }
        }
      }
    },
    "/booking": {
      "get": {
        "summary": "Get bookings",
        "tags": ["Booking"],
        "security": [{ "jwtAuth": [] }],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "description": "Find booking use these:user_id ,event_id ,booking_date",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully"
          }
        }
      }
    },
    "/booking/update": {
      "put": {
        "summary": "Update booking details",
        "tags": ["Booking"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking updated successfully"
          }
        }
      }
    },
    "/booking/delete": {
      "delete": {
        "summary": "Delete a booking",
        "tags": ["Booking"],
        "security": [{ "jwtAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking deleted successfully"
          }
        }
      }
    },
    "/ticket/generate": {
      "post": {
        "summary": "Generate a ticket",
        "tags": ["Ticket"],
        "security": [{ "jwtAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket generated successfully",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "jwtAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "JWT Token used for authentication"
      }
    },

    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "description": "Password for the user"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the user",
            "example": {
              "age": 25,
              "preferences": {
                "notifications": true
              }
            }
          }
        },
        "required": ["email", "password"]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the event"
          },
          "name": {
            "type": "string",
            "description": "Name of the event"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the event"
          },
          "location": {
            "type": "string",
            "description": "Location of the event"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the event",
            "example": {
              "organizer": "John Doe",
              "capacity": 200
            }
          }
        },
        "required": ["name", "date", "location"]
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the booking"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user who made the booking"
          },
          "eventId": {
            "type": "string",
            "description": "ID of the event being booked"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the booking",
            "example": {
              "seatNumber": "A12",
              "paymentStatus": "Paid"
            }
          }
        },
        "required": ["userId", "eventId"]
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "ID of the event associated with this ticket"
          },
          "userName": {
            "type": "string",
            "description": "Name of the  user who owns the ticket"
          },
          "eventName": {
            "type": "string",
            "description": "Name of the event from getEvent"
          },
          "Date": {
            "type": "string",
            "description": "Date when event is occurring (2020-12-3 00:00:00)"
          }
        },
        "required": ["eventName", "eventId", "userName", "Date"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "description": "Password of the user"
          }
        },
        "required": ["email", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the login request"
          },
          "message": {
            "type": "string",
            "description": "Message detailing the result of the login request"
          },
          "token": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "Access token for the user"
              },
              "refreshToken": {
                "type": "string",
                "description": "Refresh token for the user"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Error status"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    }
  }
}
